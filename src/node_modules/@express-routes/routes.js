require('dotenv').config({ override: true });
const { TOKEN_ENCRYPT } = process.env;
const Router = require('express-promise-router')
const passport = require('passport');
const router = new Router();
const { Token } = require("@edwinspire/tokens/tokendb");

const TokenDB = new Token();

// Aqui se puede cambiar la estrategia que use passport
router.post('/login',
    passport.authenticate('local-pg', { session: false }),
    async function (req, res) {
        try {
            let user = req.user.user;
            let token = await TokenDB.token(req, user.username, user.fullname, user.multilogin, user.profile, user.payload);

            if (token) {
                res.cookie('TOKEN_USER', token, {
                    expire: 3600 * 1000 * 24 * 365 * 50 // Expira en 10 años, sin ambargo internamente el token tiene su propia fecha de expiración
                });
                res.json(req.user);
            } else {
                res.status(500).json({ message: 'Token not generated' });
            }


        } catch (e) {
            console.error(e);
            res.status(500).json(e);
        }
    });



router.get('/tokens',  (req, res) => {
    let tokens = TokenDB.all();
    res.status(200).json(tokens);
});


router.get('/logout', async (req, res) => {

    await TokenDB.delete(req.cookies['TOKEN_USER']);

    req.logout();
    res.cookie('TOKEN_USER', {}, {
        expire: 1
    });
    res.redirect('/');
});


router.get('/gloval', async (req, res) => {
    let lowDB = await low(adapter);
    const post = lowDB.get('sessions')
        .find({ iduser: 9 })
        .value();
    res.status(200).json(post);
});

router.get('/set_gloval', function (req, res) {
    Test = 'Hola mundo';
    res.status(200).json(Test);
});



// Para subscribir usuarios web-push
router.post('/webpush-subscription', async (req, res) => {
    pushSubscription = req.body;
    fnAccessPoint(req, res);
});


// Para subscribir usuarios web-push
router.get('/push', async (req, res) => {
    console.log('pushSubscription2 =>> ' + pushSubscription);
    res.status(200).json({ 'pushSubscription': pushSubscription });
})



module.exports = router;
