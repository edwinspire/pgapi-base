const Router = require('express-promise-router')
const db = require('@edwinspire/express-pgapi/pgexpress')
const router = new Router();
const { Token } = require("@edwinspire/tokens/Tokendb");
const { Response } = require("@pgapi-custom-response/Response");


async function fnAccessPoint(req, res) {

    const CResponse = new Response();
    const TokenDB = new Token();

    //let toke_user = req.cookies['TOKEN_USER'];
    let user = await TokenDB.getUserFromRequest(req);

    const myURL = new URL('https://' + req.hostname + req.originalUrl);
    let ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;

    let idata = {
        cookies: req.cookies,
        body: req.body,
        query: req.query,
        method: req.method,
        pathname: myURL.pathname,
        ipclient: ip,
        headers: req.headers,
        user: user
        //  token: toke_user
    }

    try {
        let query = {
            name: idata.method,
            text: `SELECT api.fn_access_point($1::JSON)`,
            values: [JSON.stringify(idata)]
        }
        let respg = await db.query(query);
        //console.log(idata, respg.rows);
        if (respg.rows.length > 0) {
            let r = respg.rows[0].fn_access_point;

            if (r.status == '401') {

                res.cookie('TOKEN_USER', {}, {
                    expire: 1
                });

                res.status(401).location('/').end();
            } else if (r.data && r.data.EXECUTE) {
                CResponse.execute(r.data.EXECUTE, r.data, req, res);
            } else {
                res.status(r.status).json(r.data);
            }

        } else {
            res.status(204).json([]);
        }
    } catch (e) {
        console.error(e);
        res.status(500).json(e);
    }
}


router.all('/pgapi/*', async (req, res) => {
    fnAccessPoint(req, res);
})

module.exports = router;
