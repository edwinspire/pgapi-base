const { TOKEN_ENCRYPT } = process.env;
const jwt = require('jsonwebtoken');
const low = require('lowdb')
const FileAsync = require('lowdb/adapters/FileAsync')
//let db;

/*
async function createConnection() {
    const adapter = new FileAsync('token.json')
    const db = await low(adapter);
    db.defaults({ tokens: [] }).write();
}

const CheckToken = async () => {

}

const Token = async (idtoken, user) => {
    // await createConnection();
    const adapter = new FileAsync('token.json')
    const db = await low(adapter);
    let d = await db.get('tokens')
        .find({ idtoken: idtoken })
        .value();

    if (d === undefined && user) {
        // Crea el token
        d = await db.get('tokens')
            .push({ idtoken: idtoken, user: user, ts: new Date() })
            .write();
    } else if (d && user) {
        // Actualiza el token
        d = await db.get('tokens')
            .find({ idtoken: idtoken })
            .assign({ ts: new Date() })
            .write();
    } else if (d && user === undefined) {
        // Elimina el token
        d = await db.get('tokens')
            .remove({ idtoken: idtoken })
            .write();
    }

    console.log('R', d);
    return d;
}



module.exports = { createConnection, Token };
*/


export class Token {

    constructor() {
        (async () => {
            await this.createDB();
        })();
    }

    async createDB() {
        const adapter = new FileAsync('token.json')
        this.db = await low(adapter);
        this.db.defaults({ tokens: [] }).write();
    }

    async save(token, user) {
        let data = await this.db.get('tokens')
            .find({ token: token })
            .value();

        if (data === undefined && user) {
            // Crea el token
            data = await this.db.get('tokens')
                .push({ token: token, user: user, ts: new Date() })
                .write();
                console.trace('UNO', token);
        } else if (data && user) {
            // Actualiza el token
            data = await this.db.get('tokens')
                .find({ token: token })
                .assign({ ts: new Date().toString() })
                .write();
                console.trace('DOS', token);
        }
        return data;
    }

    async jwt(user) {
        let t = jwt.sign(user, TOKEN_ENCRYPT, { expiresIn: '2h' });
        await this.save(t, user);
        //console.log(user, new Date());
        return t;
    }

    async verify(token) {

        let user = null;
        try {
            user = jwt.verify(token, TOKEN_ENCRYPT);
            let data = await this.db.get('tokens')
                .find({ token: token })
                .value();

//console.log('>>>>>>> ', token, user, data);

            if (!data) {
                user = null;
            }

        } catch (err) {
            console.error(err.message);
        }
        return user;
    }

    async delete(token) {
        await this.db.get('tokens')
            .remove({ token: token })
            .write();
    }



}
